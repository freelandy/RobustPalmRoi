#################################
#  RobustPalmRoi library cmake  #
#################################

CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(ROBUST_PALM_ROI)
SET(PROJECT_ROOT ${CMAKE_SOURCE_DIR})
SET(LIBRARY_NAME robust-palm-roi)

SET(${PROJECT_NAME}_VERSION_MAJOR "0")
SET(${PROJECT_NAME}_VERSION_MINOR "1")
SET(${PROJECT_NAME}_VERSION_PATCH "0")
SET(${PROJECT_NAME}_VERSION
  "${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}.${${PROJECT_NAME}_VERSION_PATCH}")


# Project Options
OPTION(${PROJECT_NAME}_BUILD_TESTS "Enable testing" OFF)
OPTION(${PROJECT_NAME}_BUILD_SHARED_LIBS "Build Shared Libraries" ON)


FIND_PACKAGE(OpenCV REQUIRED)

IF(${PROJECT_NAME}_BUILD_TESTS)
  SET(GCC_COVERAGE_COMPILE_FLAGS "-ggdb -coverage -fprofile-arcs -ftest-coverage")
  SET(GCC_COVERAGE_LINK_FLAGS    "-coverage -lgcov")
ENDIF()
SET(CMAKE_CXX_FLAGS  "--std=c++11 ${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}")
SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS}")
SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)


# Download and unpack yaml-cpp at configure time
CONFIGURE_FILE(${PROJECT_ROOT}/thirdparty/yaml-cpp/CMakeLists.txt.in
  ${CMAKE_BINARY_DIR}/yaml-cpp-download/CMakeLists.txt)
EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/yaml-cpp-download )
IF(result)
  MESSAGE(FATAL_ERROR "CMake step for yaml-cpp failed: ${result}")
ENDIF()
EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} --build .
  RESULT_VARIABLE result
  WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/yaml-cpp-download )
IF(result)
  MESSAGE(FATAL_ERROR "Build step for yaml-cpp failed: ${result}")
ENDIF()
SET(BUILD_SHARED_LIBS ON CACHE BOOL "build yaml shared lib")
SET(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "disable yaml tests")
SET(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "disable yaml tools")
SET(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "disable yaml contrib")
ADD_SUBDIRECTORY(${CMAKE_BINARY_DIR}/yaml-cpp-src
  ${CMAKE_BINARY_DIR}/yaml-cpp-build)


# Sources, headers, directories and libs
SET(HEADER_DIRECTORY "include/robust-palm-roi/")

FILE(GLOB_RECURSE SRC_FILES "src/[a-zA-Z]*.cpp")
FILE(GLOB_RECURSE PUBLIC_HEADER_FILES "${HEADER_DIRECTORY}[a-zA-Z]*.h")
FILE(GLOB_RECURSE PRIVATE_HEADER_FILES "src/[a-zA-Z]*.h")

SET(LIBRARY_SOURCES
  ${SRC_FILES}
  ${PUBLIC_HEADER_FILES}
  ${PRIVATE_HEADER_FILES}
)

IF (CMAKE_VERSION VERSION_LESS 2.8.12)
  INCLUDE_DIRECTORIES(SYSTEM "${CMAKE_BINARY_DIR}/yaml-cpp-build/include")
  INCLUDE_DIRECTORIES(${PROJECT_ROOT}/include)
  INCLUDE_DIRECTORIES(${PROJECT_ROOT}/src)
ENDIF()


# General compilation settings
SET(${PROJECT_NAME}_C_FLAGS ${CMAKE_C_FLAGS})
SET(${PROJECT_NAME}_CXX_FLAGS ${CMAKE_CXX_FLAGS})

IF(${PROJECT_NAME}_BUILD_SHARED_LIBS)
  SET(LABEL_SUFFIX "shared")
ELSE()
  SET(LABEL_SUFFIX "static")
ENDIF()


# General install settings
SET(INCLUDE_INSTALL_ROOT_DIR include)

SET(INCLUDE_INSTALL_DIR ${INCLUDE_INSTALL_ROOT_DIR}/${LIBRARY_NAME})
SET(LIB_INSTALL_DIR "lib${LIB_SUFFIX}")

SET(_INSTALL_DESTINATIONS
  RUNTIME DESTINATION bin
  LIBRARY DESTINATION ${LIB_INSTALL_DIR}
  ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
)


# Library
ADD_LIBRARY(${LIBRARY_NAME} ${LIBRARY_SOURCES})
SET(LINK_LIBRARIES ${OpenCV_LIBS} yaml-cpp)
TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${LINK_LIBRARIES})

IF(NOT CMAKE_VERSION VERSION_LESS 2.8.12)
  TARGET_INCLUDE_DIRECTORIES(${LIBRARY_NAME}
    PUBLIC $<BUILD_INTERFACE:${PROJECT_ROOT}/include>
           $<INSTALL_INTERFACE:${INCLUDE_INSTALL_ROOT_DIR}>
    PRIVATE $<BUILD_INTERFACE:${PROJECT_ROOT}/src>
  )
ENDIF()

SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES
  COMPILE_FLAGS "${${PROJECT_NAME}_C_FLAGS} ${${PROJECT_NAME}_CXX_FLAGS}"
)

SET_TARGET_PROPERTIES(${LIBRARY_NAME} PROPERTIES
  VERSION "${${PROJECT_NAME}_VERSION}"
  SOVERSION "${${PROJECT_NAME}_VERSION_MAJOR}.${${PROJECT_NAME}_VERSION_MINOR}"
  PROJECT_LABEL "${LIBRARY_NAME} ${LABEL_SUFFIX}"
)

INSTALL(TARGETS ${LIBRARY_NAME} EXPORT ${LIBRARY_NAME}-targets ${_INSTALL_DESTINATIONS})
INSTALL(
  DIRECTORY ${HEADER_DIRECTORY}
  DESTINATION ${INCLUDE_INSTALL_DIR}
  FILES_MATCHING PATTERN "*.h"
)

EXPORT(
  TARGETS ${LIBRARY_NAME}
  FILE "${PROJECT_BINARY_DIR}/${LIBRARY_NAME}-targets.cmake"
)
EXPORT(PACKAGE RobustPalmRoi) # RobustPalmRoiConfig.cmake
SET(EXPORT_TARGETS ${LIBRARY_NAME} CACHE INTERNAL "export targets")

SET(INSTALL_CMAKE_DIR ${LIB_INSTALL_DIR}/cmake/${LIBRARY_NAME})

FILE(RELATIVE_PATH REL_INCLUDE_DIR
  "${CMAKE_INSTALL_PREFIX}/${INSTALL_CMAKE_DIR}"
  "${CMAKE_INSTALL_PREFIX}/${INCLUDE_INSTALL_ROOT_DIR}"
)

INSTALL(EXPORT ${LIBRARY_NAME}-targets DESTINATION ${INSTALL_CMAKE_DIR})


# Extras
IF(${PROJECT_NAME}_BUILD_TESTS)
	ENABLE_TESTING()
	ADD_SUBDIRECTORY(test)
ENDIF()


# Formatting
ADD_CUSTOM_TARGET(clang-format
  COMMAND clang-format --style=file -i ${LIBRARY_SOURCES}
  COMMENT "Running clang-format"
  VERBATIM
)
